2. 기본 자료구조 

1) 배열
자료구조? 
=> 데이터 단위와 데이터 자체 사이의 물리적 또는 논리적인 관계 

데이터 단위와 자료구조 
데이터 단위는 데이터를 구성하는 한 덩어리라고 생각하면 됩니다. 그리고 자료구조는 쉽게 말해 
자료를 효율적으로 이용할 수 있도록 컴퓨터에 저장하는 방법을 말합니다. 

배열 
배열은 같은 자료형의 변수로 이루어진 구성 요소가 모인것 

배열 선언 
Int [] a; a는 자료형이 int형인 배열 : 형식 A  
Int a[];  a는 자료형이 int형인 배열 : 형식 b 

a=new int[5]; //a는 길이가 5인 배열을 참조한다. 

New 연산자가 생성하는 것은 배열 본체에 대한 참조이다. 참조하는 곳이 a에 대입되고 그 결과 
배열 변수 a가 배열 본체를 참조하게 된다. 

//배열의 기초 
public static void main(String[] args) {
		int [] a = new int[5]; //배열의 선언 
		
		a[1]= 37; 
		a[2] = 51; 
		a[4] = a[1]*2; 
		
		for(int i =0; i<a.length;i++) {
			System.out.println("a [" + i + "] = " + a[i] ); 
		}
		
	}
}

int [] a ; //선언하기
a = new int[5] // 참조하기 

int a = {1,2,3,4,5} 
int a = new int[] {1,2,3,4,5}
--> 같은말 

##배열의 복제(클론) 

public static void main(String[] args) {
		int [] a = {1,2,3,4,5}; 
		int [] b = a.clone(); 
		
		b[3] = 0; 
		
		System.out.println("a = ");
		for(int i=0; i< a.length;i++) {
			System.out.print(" " + a[i]);
		}
		System.out.println("\nb = ");
		for(int i=0; i<b.length;i++) {
			System.out.print(" " + b[i]);
		}
	} 
  
  
  //배열 속 최대값 구하기 
  
  		
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.println("사람수 : "); 
		int num = sc.nextInt(); 
		
		int [] height = new int[num]; 
		
		for(int i=0; i<num; i++) {
			System.out.println("height[ " + i +"] :"); 
			height[i] = sc.nextInt();
		}
		System.out.println("최대키는 : "+ MaxOfArray(height));
		
	}
	
	static int MaxOfArray(int a[]) {
		int max = a[0]; 
		for(int i=0; i< a.length;i++) {
			if(a[i]>max) {
				max = a[i]; 
			}
		}
		return max; 
	}

** 접근 제한자 ? 
멤버는 객체 자신만의 속성이자 특징이므로 외부에 공개하는 것이 반드시 좋은 것은 아니다. 그래서 객체의 멤버에 대한 접근을 제한 할 때가 잇는데, 
이를 자바에서는 접근 제한자라고 한다. 

제한자의 종류 
public : 모든 접근 허용 
protected : 같은 패키지(폴더)의 객체, 상속 관게의 객체 허용 
default : 같은 패키지(폴더)의 객체 허용 
private : 현재의 객체 안에서만 허용 

//난수를 사용해 배열의 요솟값 설정하기 
public static void main(String[] args) {
		Random rand = new Random(); 
		Scanner sc = new Scanner(System.in); 
		
		System.out.println("max of Height"); 
		System.out.println("number of people : "); 
		int num = sc.nextInt(); 
		
		int [] height = new int[num]; 
		
		for(int i=0; i< height.length; i++) {
			height[i] = 100 + rand.nextInt(90); 
			System.out.println(height[i]); 
		}

		System.out.println("max = " + MaxOfArray(height));
	}
	static int MaxOfArray(int a[]) {
		int max = a[0]; 
		for(int i=0; i< a.length;i++) {
			if(a[i]>max) {
				max = a[i]; 
			}
		}
		return max; 
	}
  
  ##배열의 요소를 역순으로 정렬하기 
  
 맨 앞 요소를 맨뒤 요소와 바꾼 뒤, 차례차례 앞으로 당기면서 앞 뒤를 바꿔 주면 
 배열의 요소를 역순으로 정렬 할 수 있다. 
 
 public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		
		System.out.print("values: "); 
		int num = sc.nextInt(); 
		
		int [] x = new int[num]; 
		
		for (int i=0; i< num; i++) {
			System.out.print("x[ " + i + "] = ");
			x[i] = sc.nextInt(); 
		}
		
		reverse(x); 
		
		for(int i=0; i< num ; i++){
			System.out.print( " " + x[i]);
		}
	}
	static void swap(int a[],int idx1, int idx2) {
		int t = a[idx1]; 
		a[idx1] = a[idx2];
		a[idx2] = t; 
	}
	static void reverse(int[] a) {
		for (int i=0; i < a.length/2;i++) { 
			swap(a,i,a.length-i-1); 
		}
	}
  
  //과제2 배열 요소를 역순으로 정렬하는 과정을 하나하나 나타내는 프로그램을 작성하시오. 
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		
		System.out.print("values: "); 
		int num = sc.nextInt(); 
		
		int [] x = new int[num]; 
		
		for (int i=0; i< num; i++) {
			x[i] = sc.nextInt(); 
		}
		
		reverse(x); 
		
		for(int i=0; i< num ; i++){
			System.out.print(x[i] +" ");
		}
		System.out.println("역순정렬을 마치겠습니다.");
	}
	static void swap(int a[],int idx1, int idx2) {
		int t = a[idx1]; 
		a[idx1] = a[idx2];
		a[idx2] = t; 
	}
	static void reverse(int[] a) {
		for (int i=0; i < a.length/2;i++) { 
			swap(a,i,a.length-i-1); 
			System.out.print("a["+ i +"] 과 a[");
			System.out.println(a.length-i-1 +"]을 교환합니다.");
			for(int j = 0; j<a.length; j++) {
				System.out.print(a[j]+" ");
			}
			System.out.println();
		}
	}
 
 //과제3 a의 모든 요소의 합계를 구하여 반환하는 메서드를 작성 
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		System.out.print("몇 개의 요소 ? ");
		int num = sc.nextInt(); 
		int x[] = new int[num]; 
		
		for (int i=0; i<num;i++) {
			System.out.print(i +"번의 숫자를 입력하세염 ");
			x[i] = sc.nextInt(); 
		}
		
		System.out.println("배열 안의 모든 수의 합은 " + sum(x) + "입니다.");
		
	}
	
	static int sum(int[] a) {
		int sum=0; 
		for (int i=0; i< a.length; i++) {
			sum += a[i]; 
		}
		return sum; 
	}
	
  //두 배열의 비교 --> 여러 배열을처리하는 알고리즘 모든 요소의 값이 같은가? 
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		
		System.out.println("배열의 a 요소수 : "); 
		int num = sc.nextInt(); 
		
		int a[] = new int[num]; 
		
		for(int i=0; i<num;i++) {
			a[i] = sc.nextInt();
		}
		
		System.out.println("배열의 b 요소수 : "); 
		int num1 = sc.nextInt(); 
		
		int b[] = new int[num1]; 
		
		for(int i=0; i<num1;i++) {
			b[i] = sc.nextInt();
		}
	
		System.out.println("배열 a와 배열 b는 " +  (equals(a,b) ? "같습니다." : "같지않습니다."));
	
	}
	//두 배열 a,b의 모든 요소가 같은가? 
	static boolean equals(int[] a, int[] b) {
		if(a.length != b.length) {
			return false; 
		}
		for(int i=0; i< a.length; i++) {
			if(a[i]!=b[i]) {
				return false; 
			}
		}
		return true;
	}


# 과제 4 
//배열 b의 모든 요소를 배열 a에 복사하는 메서드 copy를 작성하시오 
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		
		System.out.print("number of array :"); 
		int num = sc.nextInt(); 	
		int a[] = new int[num];
		
		for(int i=0; i<num; i++) {
			a[i] = sc.nextInt();
		}
		System.out.print("numberb of array :"); 
		int numb = sc.nextInt(); 	
		int b[] = new int[numb];
		
		for(int i=0; i<b.length ;i++) {
			b[i] = sc.nextInt(); 
		}
		copy(a,b); 
		for(int i=0; i<num;i++) {
			System.out.print(a[i]+" "); 
		}
		
		
	}
	static void copy(int[] a, int[] b) {
		int num = a.length <= b.length ? a.length : b.length;
		for(int i=0;i<num;i++) {
			a[i] = b[i] ;
		}
	}
#과제 5	
#b의 요소를 a에 역순으로 복사하는 메서드 
static void copy(int[] a, int[] b) {
		int num = a.length <= b.length ? a.length : b.length;
		for(int i=0;i<num;i++) {
			a[a.length-i-1] = b[i] ;
		}
	}
}
** 과제 4번에서 저 함수의 a[] 만 바꿔주면 된다. 

#기수 변환 

정수값을 임의의 기수로 변환하는 알고리즘 , 10진수 정수를 n진수 정수로 변환하려면 정수를 n으로 나눈 나머지를 구하는 동시에 그 몫에 대해 나눗셈을 반복해야 한다. 
이 과정을 몫이 0이 될 때까지 반복하고, 이런 과정으로 구한 나머지를 거꾸로 늘어 놓은 숫자가 기수로 변환한 숫자이다.

--기수에 대하여 
n진수는 n을 기수로 하는 수이다. 10진수, 8진수, 16진수를 예로 들어 각 기수에 대해 간단히 살펴보겠다. 
more more! 

10진수는 너무 알고 있는 체계라서 skip 

8진수(Octal)는 아래 8종류의 숫자를 사용하여 수를 나타낸다. 
ex) 0,1,2,3,4,5,6,7 

0x1C -> 16진수 // 0x 로 시작하면 16진수이다. 
034 -> 0으로 시작하면 8진수이다.      


// 입력한 수를 원하는 진수로 바꾸기 

//배열 b의 모든 요소를 배열 a에 역순으로 복사하는 메서드 rcopy를 작성  
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		int no ; //변환하는 정수 
		int cd; // 기수 
		int dno; // 변환 후의 자릿수 
		int retry; // again 
		char[] cno = new char[32]; // 변환 후 각 자리의 숫자를 넣어두는 문자의 배열 
		
		System.out.println("10진수를 기수 변환한다."); 
		do {
			do {
				System.out.println("변환하는 음이 아닌 정수 : ");
				no = sc.nextInt();
				}while (no <0);	
			
			do {
				System.out.println("어떤 진수로 변환할까요?"); 
				cd = sc.nextInt(); 
			}while(cd<2 || cd>36) ;
			
			dno = cardConvR(no,cd,cno); 
			System.out.println(cd + "진수로는 "); 
			for(int i =dno -1; i>=0; i--) {
				System.out.print(cno[i]);
			}
			System.out.println("입니다.");
			
			System.out.println("one more try ? 1 yes 2 no ");
			retry = sc.nextInt(); 
			
			}while(retry==1);
		}
	
	
	//정수값 x를 r진수로 변환하여 배열 d에 아랫자리부터 넣어두고 자릿수를 반환한다. 
	static int cardConvR(int x, int r, char[] d) {
		int digits = 0; 
		String dchar ="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ"; 
		
		do {
			d[digits++] = dchar.charAt(x%r); //r로 나눈 나머지를 저장 
			x /=r; 
		}while (x!=0); 
		return digits; 
	}
	
	//문자열 거꾸로 출력하기,,,쉽네,,
	1
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  
		String str = sc.nextLine(); 
		
		for(int i = str.length()- 1; i>=0 ;i-- ) {
			System.out.print(str.charAt(i)); 
		}
	}
	2
	public static void main(String[] args) {
		
		String [] hello = {"H","E","L","L","O"}; 
		for(int i=0; i < hello.length; i++) {
			System.out.print(hello[i]); 
		}
		System.out.println();
		reverse(hello); 
		for(int i=0; i < hello.length; i++) {
			System.out.print(hello[i]); 
		}
	}
	static void swap (String [] a, int b, int c) {
		String t = a[b]; 
		a[b] = a[c]; 
		a[c] = t; 
	}
	static void reverse(String [] a) {
		for(int i=0; i<a.length/2 ; i++) {
			swap(a,i,a.length-i-1); 
		}
	}


	//어떤 정수 이하의 소수를 모두 나열하는 알고리즘 
	//소수는 자신과 1이외의 정수로 나누어 떨어지지 않는 정수 
	//2부터 n-1까지의 어떤 정수로도 나누어 떨어지지 않음. 
	
	
	public static void main(String[] args) {
		int counter =0; 
		
		for(int n =2; n<=100;n++) {
			int i; 
			for(i=2; i<n;i++) {
				counter++; 
				if(n %i ==0) 
					break; 
			}
			if(n == i) 
				System.out.println(n);
		}
		System.out.println("나눗셈을 수행한 횟수 : " + counter);
	}

그림 2 -16 얻어지는 값은 넓이가 100인 직사각형의 가로, 세로의 길이와 같다. 예를 들어 5x20 , 20x5 가로 세로가 다르지만 같은 직사각형이라고 말할 수 있다. 
그리고 모든 직사각형은 정사각형인 10 x 10을 중심으로 대칭 형태를 이루고 있다. 이는 정사각형 한 변의 길이까지만 소수로 나눗셈을 시도하고, 그 과정에서 한 번도 나누어 떨어지지 
않으면 소수로 판단해도 좋다는 것을 의미한다. 

ex ) 100이 5로 나누어 떨어지지 않는다면 20으로도 나누어 떨어지지 않습니다. 

넓이가 100이라는 것은 직사각형의 어느 한 변으로 나눌 수 있다는 것을 의미합니다. 이러한 성질을 이용하여 제곱근을 한 변으로 하는 이 후의 직사각형에 대한 계산량을 줄이는 것



//n의 제곱근 이하의 어떤 소수로도 나누어 떨어지지 않음. 
// 배열에 소수를 저장하는 형태의 코드 	
		public static void main(String[] args) {
		int counter =0; //나눗셈의 횟수 
		int ptr = 0;  // 찾은 소수의 갯수 
		int [] prime = new int[500]; //소수를 저장하는 배열 
		
		prime[ptr++] = 2; // 2는 소수 
		prime[ptr++] = 3; //3도 소수 
		
		for(int n =5; n <= 1000; n +=2) { //대상은 홀수만 
			boolean flag = false; 
			for(int i=1; prime[i] * prime[i] <=n;i++) { //전체를 다 돌필요가 없으니까 제곱근으로 제어 
				counter +=2; 
				if (n % prime[i] ==0) {
					flag = true;	//나누어 떨어지면 소수가 아님 
					break; 
				}
			}
			if(!flag) { //flag가 false일 경우 
				prime[ptr++] = n; 
				counter++; 
			}
		}
		for(int i=0 ; i <ptr ;i++) {
			System.out.println(prime[i]);
		}
		
	}
	
	
다차원 배열 

배열을 구성 요소로 하는 것이 2차원 배열이며, 2차원 배열을 구성 요소로 하는 것이 
3차원 배열이다. 

이런 배열을 보통의 배열(1차원 배열)과 구별하기 위해 다차원 배열이라고 한다. 
다차원 배열 가운데 가장 간단한 것이 2차원 배열이다. 

Int[][] x = new int[2][4]; 

가로와 세로로 “행”과 “열”이 늘어선 ‘표’와 같은 모양의 이미지 
2차원 배열 안의 각 요소는 []를 이중으로 적용한 식 x[i][j]로 접근한다. 

//다차원 함수 2행 4열의 2차원 배열 
	public static void main(String[] args) {
		int[][] x = new int[2][4]; 
		
		x[0][1] = 47; 
		x[0][3] = 54;
		x[1][2] = 65; 
		
		for(int i=0; i<2 ;i++) {
			for(int j =0; j<4 ; j++) {
				System.out.println("x["+i+"]["+j+"] =" + x[i][j] );
			}
		}
		
	}

	
